/**
 * https://leetcode-cn.com/problems/factorial-trailing-zeroes/
 * 
 * 计算阶乘 n! 的结果末尾有几个 0。
 * 首先，两个数相乘结果末尾有 0，一定是因为两个数中有因子 2 和 5，因为 10 = 2 x 5。
 * 而且有几对 2 和 5 就有几个 0。所以问题转化为：n! 最多可以分解出多少对 2 和 5？
 * 进一步，因为每个偶数都能分解出因子 2，所以因子 2 肯定比因子 5 多得多。
 * 故，问题最终转化为：n! 最多可以分解出多少个因子 5？
 * 
 * 难点在于像 25，50，125 这样的数，可以提供不止一个因子 5，怎么才能不漏掉呢？
 * 假设 n = 125，来算一算 125! 的结果末尾有几个 0：
 * 首先，1～125 中 5 的倍数有 125 / 5 = 25 个，它们可以提供一个因子 5；
 * 其次，1～125 中 25 的倍数有 125 / 5 / 5 = 5 个，它们可以提供两个因子 5；
 * 最后，1～125 中 125 的倍数有 125 / 5 / 5 / 5 = 1 个，它们可以提供三个因子 5；
 * 最多可以分解出 25 + 5 + 1 = 31 个因子 5，也就是说阶乘结果的末尾有 31 个 0。
 */
class Solution {
 public:
  int trailingZeroes(int n) {
    int ret = 0;
    int tmp;
    while ((tmp = n / 5)) { // 除 5 得到 5*i 的个数
      ret += tmp;
      n /= 5;
    }
    return ret;
  }
};